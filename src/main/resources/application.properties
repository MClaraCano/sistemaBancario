
#Cuando se trabaja de manera colaborativa, no hay que completarlo:
#Así cada uno conecta con su BBDD (es una BBDD local)

#spring.datasource.url=http://localhost:3306/bankingspring
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/bankingspring
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class=com.mysql.cj.jdbc.Driver

# Vamos a trabajar con BBDD a través del framework Spring:

# - JPA: Framework que forma parte de Java, y ofrece un conjunto de interfaces
# para resolver el prob del almacenamiento los objs en una BBDD relacional
# Brinda interfaces para ser luego implementadas por distintos proveedores
# Una tabla se mapea contra una clase
# Usaremos anotaciones de JPA ára indicar estas relaciones
# Nos vamos a desligar de generar el código SQL, usaremos anotaciones



# A través del framework Hibernate (implementación de la especificación JPA), vamos a generar
# nuestros DDl de forma automática creando las tablas



# Hibernate es un ORM (Objet Relationship Mapper):
# Ayuda a hacer las relaciones automáticamente, como el mapeo
 # hará la tabla automáticamente:

spring.jpa.hibernate.ddl-auto=update



# Sentencias SQL en dos grandes grupos
# Sentencias DDL y DML
# DDL (Data Definition Lenguage): Crear, modificar o eliminar Schemas (BBDD), Tablas
# CREATE, DROAP, TRUNCATE, etc

# DML (Data Manipulation Language): Insertar, modificar o eliminar datos de las Tablas
# INSERT, UPDATE, DELETE, SELECT, etc

# BBDD Relacionales: Tablas
# BBDD NoSQL (no relacionales): Documentos


# CONSULTAS NATIVAS - JPA
# Consultas JPQL, hacen referencia a clases Java y sus campos,
# y no a tablas y columnas


# Conexion con BBDD: JDBC
# Anotaciones: JPA
# Hibernate: Implementación que nos permite ejecutar todo lo otro